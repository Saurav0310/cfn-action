---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer with Native Subnets and Security Group'

Parameters:
  Alias:
    Type: String
    Description: Enter an alias for the ALB (Optional)
    Default: ""
  
  SubnetType:
    Type: String
    Description: Specify in what subnets the ALB will be used
    AllowedValues: ["Public", "Native", "Route3"]
    Default: "Native"
  
  SSLCertificateArn:
    Type: String
    Description: ARN of a pre-loaded SSL certificate on this account
    Default: ""

Resources:
  # Security Group for ALB with specific CIDR rules
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application Load Balancer
      VpcId:
        Fn::ImportValue: VpcV3-VpcId  # Assuming VPC ID is exported
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 48.0.0.0/8
          Description: "Allow HTTP from 48.0.0.0/8"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 48.0.0.0/8
          Description: "Allow HTTPS from 48.0.0.0/8"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb-sg"

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Subnets:
        !If [IsPublic,
          [
            Fn::ImportValue: VpcV3-Public-1,
            Fn::ImportValue: VpcV3-Public-2,
            Fn::ImportValue: VpcV3-Public-3
          ],
          !If [IsNative,
            [
              Fn::ImportValue: VpcV3-Native-1,
              Fn::ImportValue: VpcV3-Native-2,
              Fn::ImportValue: VpcV3-Native-3
            ],
            [
              Fn::ImportValue: VpcV3-PrvRouted-1,
              Fn::ImportValue: VpcV3-PrvRouted-2,
              Fn::ImportValue: VpcV3-PrvRouted-3
            ]
          ]
        ]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: !If [IsPublic, "internet-facing", "internal"]
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb"

  # HTTPS Listener with SSL Certificate
  DefaultHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSL
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "200"
            ContentType: "text/plain"
            MessageBody: "ALB HTTPS is working"

  # HTTP Listener
  DefaultHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "200"
            ContentType: "text/plain"
            MessageBody: "ALB HTTP is working"

Conditions:
  IsPublic: !Equals [!Ref SubnetType, "Public"]
  IsNative: !Equals [!Ref SubnetType, "Native"]
  IsRoute3: !Equals [!Ref SubnetType, "Route3"]
  HasSSL: !Not [!Equals [!Ref SSLCertificateArn, ""]]

Outputs:
  LoadBalancerDNS:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.DNSName
  
  LoadBalancerURL:
    Description: ALB URL
    Value: !Sub "http://${LoadBalancer.DNSName}"
  
  LoadBalancerSecureURL:
    Description: ALB Secure URL
    Value: !Sub "https://${LoadBalancer.DNSName}"
    Condition: HasSSL
  
  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSecurityGroup
  
  LoadBalancerListener:
    Description: Load Balancer Listener
    Value: !Ref DefaultHttpListener
